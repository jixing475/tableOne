library(sjmisc)
library(here)
colnames(iris)
iris <- data(iris)
iris
colnames(iris)
colnames(iris3)
iris3 %>%
arrange(desc(`Sepal L.`)) %>%
View()
iris3
iris3 %>%
as.data.frame() %>%
arrange(desc(`Sepal L.`)) %>%
View()
iris3 %>%
as.data.frame() %>% colnames()
mtcar
mtcars
colnames(mtcars)
mtcars %>%
arrange(mpg) %>%
View()
mtcars %>%
arrange(desc(mpg)) %>%
View()
colnames(iris3) %>% clipr::write_clip()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
options("esquisse.display.mode" = "browser")
esquisse::esquisser()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
system.file("app", package = "tableOne")
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
install.packages("googleVis")
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
system.file("app", package = "tableOne")
esquisse::esquisser()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
mtcar
mtcars
golem::add_module("select")
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
icon()
?icon
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
colnames(iris) %>% clipr::write_clip()
iris %>%
arrange(Sepal.Length) %>%
head()
library(tidyverse)
library(sjmisc)
library(here)
iris %>%
arrange(Sepal.Length) %>%
head()
View(iris)
iris %>%
arrange(Sepal.Length) %>%
head(desc(Sepal.Length))
iris %>%
arrange(Sepal.Length) %>%
head(desc(Sepal.Length))
iris %>%
arrange(Sepal.Length) %>%
head(6,desc(Sepal.Length))
iris %>%
#arrange(Sepal.Length) %>%
head(6,desc(Sepal.Length))
iris %>%
arrange(Sepal.Length) %>%
head(6)
install.packages("bs4Dash")
library(bs4Dash)
# classic theme
bs4DashGallery()
bs4DashGallery(theme = "old_school")
#data <- callModule(mod_csv_file,"fichier")
data  <- callModule(mod_inputFile_server, "fichier")
output$tableau <- renderDT({data()})
.rs.api.documentSaveAll() # close and save all open file
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))
rm(list = ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
library(shiny)
library(DT)
if (interactive()){
ui <- fluidPage(
#mod_csv_fileInput("fichier"),
mod_inputFile_ui("fichier"),
DTOutput("tableau")
)
server <- function(input, output, session) {
#data <- callModule(mod_csv_file,"fichier")
data  <- callModule(mod_inputFile_server, "fichier")
output$tableau <- renderDT({data()})
}
shinyApp(ui, server)
}
.rs.api.documentSaveAll() # close and save all open file
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))
rm(list = ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
library(shiny)
library(DT)
if (interactive()){
ui <- fluidPage(
#mod_csv_fileInput("fichier"),
mod_inputFile_ui("fichier"),
DTOutput("tableau")
)
server <- function(input, output, session) {
#data <- callModule(mod_csv_file,"fichier")
data  <- callModule(mod_inputFile_server, "fichier")
output$tableau <- renderDT({data()})
}
shinyApp(ui, server)
}
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/jixing/tableOne/dev/run_dev.R')
golem::app_dev()
golem::app_prod()
golem::use_recommended_dep(recommended = c("shiny","DT","attempt","glue","htmltools","golem"))
golem::js()
golem::browser_button()
golem::use_recommended_tests()
install.packages("golem")
remotes::install_github("Thinkr-open/golem")
golem::add_dockerfile_heroku()
devtools::build()
golem::add_dockerfile_heroku()
devtools::build()
golem::add_rconnect_file()
rsconnect::deployApp()
shiny::runApp()
golem::add_rconnect_file()
rsconnect::deployApp()
install.packages("tableone")
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
install.packages("golem")
remotes::install_github("Thinkr-open/golem")
devtools::install_github(repo = "kaz-yos/tableone", ref = "develop")
devtools::load_all(".")
run_app()
library(tableone)
remove.packages("tableOne")
library(tableOne)
shiny::runApp()
runApp()
golem::add_dockerfile_heroku()
devtools::build()
golem::add_dockerfile_heroku()
devtools::build()
options("esquisse.display.mode" = "browser")
esquisse::esquisser()
esquisse::esquisser(iris)
esquisse::esquisser()
#' Utility to export ggplot objects to PowerPoint
#'
#' You can use the RStudio addin to interactively select ggplot objects, or
#' directly pass their names to the function.
#'
#' @param gg character. Name(s) of ggplot object(s), if NULL, launch the Shiny gadget.
#'
#' @return Path to the temporary PowerPoint file.
#' @export
#'
#' @importFrom utils browseURL
#' @importFrom shiny actionButton icon observeEvent dialogViewer runGadget stopApp actionLink
#' @importFrom miniUI miniPage miniContentPanel miniButtonBlock
#' @importFrom shinyWidgets updateProgressBar progressBar prettyCheckboxGroup updatePrettyCheckboxGroup
#' @importFrom ggplot2 ggplot_build
#'
#' @examples
#'
#' # Shiny gadget
#' if (interactive()) {
#'
#' ggplot_to_ppt()
#'
#' # Or with an object's name
#' library(ggplot2)
#' p <- ggplot(iris) +
#'   geom_point(aes(Sepal.Length, Sepal.Width))
#'
#' ggplot_to_ppt("p")
#'
#' }
#'
ggplot_to_ppt <- function(gg = NULL) {
if (!requireNamespace(package = "rvg"))
message("Package 'rvg' is required to run this function")
if (!requireNamespace(package = "officer"))
message("Package 'officer' is required to run this function")
# temp file to create ppt
tmp <- tempfile(pattern = "esquisse", fileext = ".pptx")
# get ggplots objects
ggplots <- search_obj(what = "ggplot")
# if no ggplot dont go further
if (is.null(ggplots)) {
message("No ggplot object in environment...")
return(invisible())
}
if (!is.null(gg)) {
if (!is.character(gg)) {
stop("You must provide a character vector containing the names of plots to export", call. = FALSE)
}
if (!all(gg %in% ggplots)) {
stop("Not all valid ggplot objects.", call. = FALSE)
}
ppt <- officer::read_pptx()
for (ggg in gg) {
ppt <- officer::add_slide(ppt, layout = "Title and Content", master = "Office Theme")
testgg <- try(invisible(ggplot2::ggplot_build(get(ggg, envir = globalenv()))), silent = TRUE)
if (!"try-error" %in% class(testgg)) {
ppt <- rvg::ph_with_vg(ppt, print(get(ggg, envir = globalenv())), type = "body")
} else {
warning(paste0("Skipping '", ggg, "' because : ", attr(testgg, "condition")$message))
}
print(ppt, target = tmp)
browseURL(url = tmp)
} else {
ui <- miniPage(
useShinyUtils(),
miniContentPanel(
prettyCheckboxGroup(
inputId = "select_gg",
label = tags$span("ggplot(s) to export ", actionLink(inputId = "all", label = "(select all)")),
choices = ggplots, status = "primary",
icon = icon("check")
),
tags$div(
id = "ppt-pb", style = "display: none;",
progressBar(id = "progress-ppt", value = 0, display_pct = TRUE)
)
),
miniButtonBlock(
actionButton(
inputId = "export", label = "Export",
icon = icon("file-powerpoint-o"),
class = "btn-block btn-primary"
)
server <- function(input, output, session) {
observeEvent(input$all, {
updatePrettyCheckboxGroup(
session = session, inputId = "select_gg", selected = ggplots
)
})
observeEvent(input$select_gg, {
if (length(input$select_gg) > 0) {
toggleBtn(session = session, inputId = "export", type = "enable")
} else {
toggleBtn(session = session, inputId = "export", type = "disable")
}
}, ignoreNULL = FALSE)
observeEvent(input$export, {
toggleDisplay(session = session, id = "ppt-pb", display = "block")
if (length(input$select_gg) > 0) {
total <- 2 + 2*length(input$select_gg)
count <- 1
ppt <- officer::read_pptx()
updateProgressBar(session = session, id = "progress-ppt", value = count/total*100)
count <- count + 1
for (ggg in input$select_gg) {
ppt <- officer::add_slide(ppt, layout = "Title and Content", master = "Office Theme")
updateProgressBar(session = session, id = "progress-ppt", value = count/total*100)
count <- count + 1
# ppt <- rvg::ph_with_vg(ppt, print(get(ggg, envir = globalenv())), type = "body")
testgg <- try(invisible(ggplot2::ggplot_build(get(ggg, envir = globalenv()))), silent = TRUE)
if (!"try-error" %in% class(testgg)) {
ppt <- rvg::ph_with_vg(ppt, print(get(ggg, envir = globalenv())), type = "body")
} else {
warning(paste0("Skipping '", ggg, "' because of : ", attr(testgg, "condition")$message))
}
updateProgressBar(session = session, id = "progress-ppt", value = count/total*100)
count <- count + 1
}
print(ppt, target = tmp)
updateProgressBar(session = session, id = "progress-ppt", value = count/total*100)
utils::browseURL(url = tmp)
stopApp()
}
})
}
inviewer <- dialogViewer(
"Export your ggplot2 to PowerPoint",
width = 450, height = 180
)
runGadget(app = ui, server = server, viewer = inviewer)
}
# how to create a bar plot with ggplot2
library(ggthemes)
library(ggplot2)
#how to create a barplot with label using ggplot2 package
iris %>%
group_by(Species) %>%
summarise(counts = n()) %>%
mutate(Species = fct_reorder(Species, counts)) %>%
ggplot(aes(x = Species, y = counts, fill = Species)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), hjust = 1.6, color = "white", size = 5) +
coord_flip() +
theme_minimal()+ scale_color_tableau() + scale_fill_tableau()+
labs(caption = "figure 01") +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
legend.position = "bottom",
plot.caption=element_text(size=12,family = "Arial",face = "bold",
hjust=0, margin=margin(t=15)))
library(tidyverse)
library(sjmisc)
library(here)
#how to create a barplot with label using ggplot2 package
p <- iris %>%
group_by(Species) %>%
summarise(counts = n()) %>%
mutate(Species = fct_reorder(Species, counts)) %>%
ggplot(aes(x = Species, y = counts, fill = Species)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), hjust = 1.6, color = "white", size = 5) +
coord_flip() +
theme_minimal()+ scale_color_tableau() + scale_fill_tableau()+
labs(caption = "figure 01") +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
legend.position = "bottom",
plot.caption=element_text(size=12,family = "Arial",face = "bold",
hjust=0, margin=margin(t=15)))
ggplot_to_ppt(p)
#' Search for object with specific class in an environment
#'
#' @param what a class to look for
#' @param env An environment
#'
#' @return Character vector of the names of objects, NULL if none
#' @noRd
#'
#' @examples
#'
#' # NULL if no data.frame
#' search_obj("data.frame")
#'
#' library(ggplot2)
#' data("mpg")
#' search_obj("data.frame")
#'
#' gg <- ggplot()
#' search_obj("ggplot")
#'
search_obj <- function(what = "data.frame", env = globalenv()) {
all <- ls(name = env)
objs <- lapply(
X = all,
FUN = function(x) {
if (inherits(get(x, envir = env), what = what)) {
x
} else {
NULL
}
)
objs <- unlist(objs)
if (length(objs) == 1 && objs == "") {
NULL
} else {
objs
}
ggplot_to_ppt(p)
View(ggplot_to_ppt)
ggplot_to_ppt(p)
class(p)
search_obj("gg")
search_obj("function")
ggplot_to_ppt("p")
tableOne::run_app()
