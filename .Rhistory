#'
#' # NULL if no data.frame
#' search_obj("data.frame")
#'
#' library(ggplot2)
#' data("mpg")
#' search_obj("data.frame")
#'
#' gg <- ggplot()
#' search_obj("ggplot")
#'
search_obj <- function(what = "data.frame", env = globalenv()) {
all <- ls(name = env)
objs <- lapply(
X = all,
FUN = function(x) {
if (inherits(get(x, envir = env), what = what)) {
x
} else {
NULL
}
)
objs <- unlist(objs)
if (length(objs) == 1 && objs == "") {
NULL
} else {
objs
}
ggplot_to_ppt(p)
View(ggplot_to_ppt)
ggplot_to_ppt(p)
class(p)
search_obj("gg")
search_obj("function")
ggplot_to_ppt("p")
tableOne::run_app()
library(tableOne)
tableOne::run_app()
library(tableOne)
golem::add_dockerfile_heroku()
devtools::build()
heroku container:push web --app tableone-0-0-0-9000
pwd
library(tableOne)
golem::add_dockerfile_heroku()
devtools::build()
golem::add_dockerfile_heroku()
devtools::build()
.jcall('java.lang.System','S','getProperty','java.version')
require(rJava)
.jinit()
.jcall('java.lang.System','S','getProperty','java.version')
library(officer)
library(magrittr)
TableOne <- iris # 🏃ass a dataframe
MyFTable <-
TableOne%>%
# 设置字体
flexTable(header.cell.props = cellProperties( background.color = "#DDDDDD"),
header.text.props = textBold(color = "black"),
add.rownames = FALSE ) %>%
#设置边界
setFlexTableBorders(inner.vertical = borderNone(),
inner.horizontal = borderNone(),
outer.vertical = borderNone(),
outer.horizontal = borderProperties( color = "black",style = "solid", width = 2 )) %>%
#斑马线
setZebraStyle(odd = "#FFFFFF", even = "#FFFFFF")
MyFTable <-
TableOne%>%
# 设置字体
flextable(header.cell.props = cellProperties( background.color = "#DDDDDD"),
header.text.props = textBold(color = "black"),
add.rownames = FALSE ) %>%
#设置边界
setFlexTableBorders(inner.vertical = borderNone(),
inner.horizontal = borderNone(),
outer.vertical = borderNone(),
outer.horizontal = borderProperties( color = "black",style = "solid", width = 2 )) %>%
#斑马线
setZebraStyle(odd = "#FFFFFF", even = "#FFFFFF")
install.packages("officer")
install.packages("flextable")
library(flextable)
TableOne <- iris # 🏃ass a dataframe
MyFTable <-
TableOne%>%
# 设置字体
flextable(header.cell.props = cellProperties( background.color = "#DDDDDD"),
header.text.props = textBold(color = "black"),
add.rownames = FALSE ) %>%
#设置边界
setFlexTableBorders(inner.vertical = borderNone(),
inner.horizontal = borderNone(),
outer.vertical = borderNone(),
outer.horizontal = borderProperties( color = "black",style = "solid", width = 2 )) %>%
#斑马线
setZebraStyle(odd = "#FFFFFF", even = "#FFFFFF")
ft <- flextable(data = TableOne)
TableOne <- iris %>% head() # 🏃ass a dataframe
ft <- flextable(data = TableOne)
read_docx() %>%
body_add_flextable(ft) %>%
print(target = "~/Desktop/flextable.docx")
officer::read_docx() %>%
body_add_flextable(ft) %>%
print(target = "~/Desktop/flextable.docx")
dummy_fun = function(x, ...) {
if( nrow(x) < 10 )
knit_print(qflextable(x))
else {
ft <- qflextable(head(x, n = 15))
ft <- add_footer_lines(ft, values = sprintf("(15 first lines /  %.0f lines)", nrow(x)))
knit_print(theme_zebra(ft))
}
library(knitr)
registerS3method("knit_print", "data.frame", dummy_fun)
iris
library(shiny)
library(flextable)
ui <- fluidPage(
titlePanel("mtcars"),
sidebarLayout(
sidebarPanel(
sliderInput("mpg", "mpg Limit", min = 11, max = 33, value = 20)
),
mainPanel(
uiOutput("mtcars_ft")
)
server <- function(input, output) {
library(dplyr)
output$mtcars_ft <- renderUI({
req(input$mpg)
mtcars %>%
mutate(car = rownames(.)) %>%
select(car, everything()) %>%
filter(mpg <= input$mpg) %>%
flextable() %>%
theme_booktabs() %>%
htmltools_value()
})
}
# Run the application
shinyApp(ui = ui, server = server)
TableOne <- iris %>% head() # 🏃ass a dataframe
myft <- flextable(data = TableOne)
myft <- bold(myft, part = "header")
myft <- theme_zebra(myft, odd_header = "#CFCFCF", odd_body = "#EFEFEF")
officer::read_docx() %>%
body_add_flextable(myft) %>%
print(target = "~/Desktop/flextable.docx")
TableOne <- iris %>% head() # 🏃ass a dataframe
myft <- flextable(data = TableOne)
myft <- bold(myft, part = "header")
myft <- hline(myft, border = fp_border(width = 2, color = "#007FA6"), part = "header" )
myft <- fontsize(myft, size = 12, part = "all")
myft <- theme_zebra(myft, odd_header = "#CFCFCF", odd_body = "#EFEFEF")
officer::read_docx() %>%
body_add_flextable(myft) %>%
print(target = "~/Desktop/flextable.docx")
TableOne <- iris %>% head() # 🏃ass a dataframe
myft <- flextable(data = TableOne)
myft <- bold(myft, part = "header")
myft <- hline(myft, border = fp_border(width = 2, color = "#007FA6"), part = "header" )
myft <- fontsize(myft, size = 12, part = "all")
myft <- theme_zebra(myft, odd_header = "#EFEFEF", odd_body = "#CFCFCF")
officer::read_docx() %>%
body_add_flextable(myft) %>%
print(target = "~/Desktop/flextable.docx")
TableOne <- iris %>% head() # 🏃ass a dataframe
myft <- flextable(data = TableOne)
myft <- bold(myft, part = "header")
myft <- hline(myft, border = fp_border(width = 2, color = "#007FA6"), part = "header" )
myft <- fontsize(myft, size = 12, part = "all")
myft <- theme_zebra(myft, odd_header = "#EFEFEF", odd_body = "#CFCFCF")
officer::read_docx() %>%
body_add_flextable(myft) %>%
print(target = "~/Desktop/flextable.docx")
myft <- flextable(data = TableOne)
myft <- bold(myft, part = "header")
myft <- hline(myft, border = fp_border(width = 2, color = "#111112"), part = "header" )
myft <- fontsize(myft, size = 12, part = "all")
myft <- theme_zebra(myft, odd_header = "#EFEFEF", odd_body = "#CFCFCF")
officer::read_docx() %>%
body_add_flextable(myft) %>%
print(target = "~/Desktop/flextable.docx")
myft <- flextable(data = TableOne)
myft <- bold(myft, part = "header")
myft <- hline(myft, border = fp_border(width = .75, color = "#007FA6"), part = "body" )
myft <- hline(myft, border = fp_border(width = 2, color = "#007FA6"), part = "header" )
myft <- theme_zebra(myft, odd_header = "#EFEFEF", odd_body = "#CFCFCF")
officer::read_docx() %>%
body_add_flextable(myft) %>%
print(target = "~/Desktop/flextable.docx")
myft
TableOne <- iris %>% head() # 🏃ass a dataframe
myft <- flextable(data = TableOne, theme_fun = theme_zebra)
myft
myft <- theme_zebra(myft, odd_header = "#CFCFCF", odd_body = "#EFEFEF")
myft
myft <- theme_zebra(myft, odd_body = "#EFEFEF")
myft
(myft <- theme_alafoli(myft))
(myft <- theme_booktabs(myft))
(myft <- theme_box(myft))
(myft <- theme_tron(myft))
(myft <- theme_tron_legacy(myft))
(myft <- theme_vader(myft))
(myft <- theme_vanilla(myft))
(myft <- theme_booktabs(myft))
myft <- flextable(data = TableOne)
myft <- bold(myft, part = "header")
myft <- hline(myft, border = fp_border(width = .75, color = "#007FA6"), part = "body" )
myft <- hline(myft, border = fp_border(width = 2, color = "#007FA6"), part = "header" )
(myft <- theme_booktabs(myft))
myft <- flextable(data = TableOne)
myft <- bold(myft, part = "header")
myft <- hline(myft, border = fp_border(width = .75, color = "#007FA6"), part = "body" )
myft <- hline(myft, border = fp_border(width = 2, color = "#007FA6"), part = "header" )
(myft <- theme_booktabs(myft))
myft <- flextable(data = TableOne, theme_fun = theme_booktabs)
(myft <- bold(myft, part = "header"))
myft <- hline(myft, border = fp_border(width = .75, color = "#007FA6"), part = "body" )
myft <- hline(myft, border = officer::fp_border(width = .75, color = "#007FA6"), part = "body" )
myft
myft <-
TableOne %>%
flextable(theme_fun = theme_booktabs) %>%
bold(part = "header")
officer::read_docx() %>%
body_add_flextable(myft) %>%
print(target = "~/Desktop/flextable.docx")
myft <-
TableOne %>%
flextable(theme_fun = theme_booktabs) %>%
bold(part = "header") %>%
fontsize(size = 12, part = "header")
myft
if (interactive()){
ui <- fluidPage(
mod_export_word_table_ui("jixing")
)
server <- function(input, output, session) {
callModule(mod_export_word_table_server,"jixing", data = head(iris))
}
shinyApp(ui, server)
}
devtools::load_all(".")
library(tableOne)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/jixing/tableOne/inst/dev/run_dev_mod_export_word.R')
#inst/dev/run_dev_mod_csv_fileInput.R
.rs.api.documentSaveAll() # close and save all open file
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))
rm(list = ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
library(shiny)
library(DT)
if (interactive()){
ui <- fluidPage(
mod_export_word_table_ui("jixing")
)
server <- function(input, output, session) {
callModule(mod_export_word_table_server,"jixing", data = head(iris))
}
shinyApp(ui, server)
}
iris
is.numeric(iris)
library(tidyverse)
library(sjmisc)
library(here)
map_lgl(iris, is.numeric)
colnames(iris)
sele <- colnames(iris)
sele[map_lgl(iris, is.numeric)]
sele[-map_lgl(iris, is.numeric)]
sele[!map_lgl(iris, is.numeric)]
library(tableOne)
run_app()
dt <- read.csv(file.choose(), header=TRUE, sep=",")
head(dt)
colnames(iris) %>% clipr::write_clip()
dt <- iris
listVar <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
catVar <- "Species"
table1 <- CreateTableOne(vars = listVar, data = dt, factorVars = catVar)
table1
table2 <- CreateTableOne(vars = listVar, data = dt, factorVars = catVar, strata = c("Species"))
table2
list(table1, table2) %>%
do.call(cbind)
list(table1, table2) %>%
reduce(bind_cols)
list(table1, table2) %>% view()
table1 %>%
reduce(bind_cols)
print(table1)
list_2_df  <- function(table_one, non_normal){
res <- print(
table_one,
nonnormal = non_normal,# nonparametric test
#exact = c("status", "stage"), # fisher.test
#cramVars = "sex", # both levels are shown
quote = FALSE
)
#==== edit results ====
colnames(res) <-  stringr::str_replace_all(colnames(res), '"', '')
res <-
res %>%
as.data.frame() %>%
mutate(Variable = stringr::str_replace_all(rownames(res), '"', '')) %>%
select(Variable, everything())
return(res)
}
list_2_df  <- function(table_one, non_normal=NULL){
res <- print(
table_one,
nonnormal = non_normal,# nonparametric test
#exact = c("status", "stage"), # fisher.test
#cramVars = "sex", # both levels are shown
quote = FALSE
)
#==== edit results ====
colnames(res) <-  stringr::str_replace_all(colnames(res), '"', '')
res <-
res %>%
as.data.frame() %>%
mutate(Variable = stringr::str_replace_all(rownames(res), '"', '')) %>%
select(Variable, everything())
return(res)
}
list_2_df(table1)
list_2_df(table1) %>% view()
list_2_df(table2) %>% view()
list_2_df(table1) %>% view()
left_join(list_2_df(table1),  list_2_df(table2), by = "variable")
left_join(list_2_df(table1),  list_2_df(table2), by = "variables")
list_2_df(table1)
left_join(list_2_df(table1),  list_2_df(table2), by = "Variable")
left_join(list_2_df(table1),  list_2_df(table2), by = "Variable") %>% View()
left_join(list_2_df(table1),  list_2_df(table2), by = "Variable") %>%
select(Variable, Overall, everything()) %>% view()
library(tableOne)
run_app()
library(tableOne)
run_app()
install.packages("tableone")
library(tableone)
install.packages("tableone")
library(tableone)
library(ztable)
install.packages("ztable")
library(tableone)
install.packages("tableone")
.Library
library(tableOne)
shiny::runApp()
library(tableOne)
runApp()
golem::add_dockerfile_heroku()
devtools::build()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
visdat::vis_miss(iris)
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
runApp()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
golem::add_dockerfile_heroku()
devtools::build()
run_app()
library(tableOne)
golem::add_dockerfile_heroku()
devtools::build()
library(tableOne)
run_app()
library(tableOne)
rrun_app()
run_app()
runApp()
library(tableOne)
run_app()
runApp()
library(tableOne)
run_app()
runApp()
tagList(
# Leave this function for adding external resources
# from inst/app/www
golem_add_external_resources(),
golem::js(),
golem::favicon(),
# List the first level UI elements here
fluidPage(
#titlePanel( "TableOne" ),
headerPanel("Table 1"),
sidebarLayout(
sidebarPanel(
#mod_csv_fileInput("jixing"),
mod_inputFile_ui("jixing"),
#choices_test <- textOutput("cols"),
#mod_tableOneInput("zhuzhu", choices = colnames(data_csv))
br(),
actionButton("mybutton", "Click to update selection"),
uiOutput("my_select_UI"),
actionButton("go", "Click to create TableOne")
),
# mainPanel --------------------------------------------------
mainPanel(tabsetPanel(
position = c("right"),
tabPanel(strong("Data upload"),
DT::DTOutput("data_upload"),
plotOutput("plot_missing")
),
tabPanel(
strong("Table 1"),
DT::DTOutput("my_table_one") %>%
shinycssloaders::withSpinner(),
br(),
mod_export_word_table_ui("tableone_word")
)
))
)
runApp()
library(tableOne)
run_app()
runApp()
library(tableOne)
run_app()
runApp()
library(tableOne)
run_app()
runApp()
library(tableOne)
run_app()
runApp()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
runApp()
install.packages("insight")
shiny::runApp()
library(tableOne)
run_app()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(tableOne)
run_app()
tableOne::run_app()
colnames(iris) %>% clipr::write_clip()
tableOne::run_app()
iris %>%
mutate_if(names  %in%  c("Species"),as.factor())
iris %>%
mutate_if(names(.)  %in%  c("Species"), as.factor())
iris %>%
mutate_if(., names(.)  %in%  c("Species"), as.factor())
dat <- iris
dat$Species <- as.character(dat$Species)
dat %>%
map(~ names(.x))
for (i in names(dat)) {           # sequence
print(i)    # loop body
}
for (i in names(dat)) {           # sequence
if(i  %in%  c("Species")){
dat[[i]] <- as.factor(dat[[i]])
}
library(tableOne)
devtools::install_github("jixing475/tableOne")
tableOne::run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
library(tableOne)
run_app()
devtools::install_github("jixing475/tableOne")
tableOne::run_app()
